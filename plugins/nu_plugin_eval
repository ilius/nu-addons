#!/usr/bin/python3
import json
import fileinput
import os
import sys
from datetime import datetime
from datetime import timedelta

"""
Examples:

echo [1 2 3] | wrap a | eval a**2 | wrap a^2
echo [1 2 3] | wrap a | eval a ** 2 | wrap a^2
seq 1 10 | wrap a | eval int(a)**2 | wrap a^2
seq 1 10 | wrap a | eval int(a) ** 2 | wrap a^2
seq 1 10 | wrap a | str to-int a | insert a^2 {eval a**2}

echo [[a b c]; [1.0 2.5 3]] | eval a + b + c
echo [[a b c]; [1.0 2.5 3]] | eval a > 1
echo [[a b c]; [1.0 2.5 3]] | eval f'a={a}, b={b}, c={c}'

echo [[h m s]; [12 44 13]] | eval timedelta(hours=h, minutes=m, seconds=s)
echo [[h m s]; [12 44 13]] | eval str(timedelta(hours=h, minutes=m, seconds=s))
echo [[d]; [12sec]] | eval d, str(d) | flatten

echo [[a b c]; [1.0 2.5 [3 4]]] | eval c | flatten
echo [[a b c]; [1.0 2.5 [3 4]]] | eval a, b | flatten
echo [[a b c]; [1.0 2.5 $nothing]] | eval repr(c)


ls | eval modified.isoformat()
ls | eval modified + timedelta(days=1, hours=2)

echo [[a b c]; [1.0 2.5 [3 4]]] | eval locals()
echo [[a b c]; [1.0 2.5 [3 4]]] | eval globals() | pivot
echo [[a]; [1]] | eval globals() | get __builtins__ | pivot
echo [[a]; [1]] | eval getenv("PATH").split(":") | flatten


"""

eval_globals = {
	"datetime": datetime,
	"timedelta": timedelta,
	"getenv": os.getenv,
	"open": None,
	"exec": None,
	"input": None,
	"print": None,
}


def print_good_response(response):
	json_response = {
		"jsonrpc": "2.0",
		"method": "response",
		"params": {"Ok": response},
	}
	print(json.dumps(json_response))
	sys.stdout.flush()


def decodeValue(v: dict):
	if "value" in v:
		v = v["value"]
	if "Primitive" in v:
		p = v["Primitive"]
		if "String" in p:
			return p["String"]
		if "Int" in p:
			return int(p["Int"])
		if "Decimal" in p:
			return float(p["Decimal"])
		if "FilePath" in p:
			return p["FilePath"]
		if "Filesize" in p:
			factor, numList = p["Filesize"]
			if numList:
				return factor * numList[0]
			else:
				return 0
		if "Nothing" in p:
			return None
		if "Date" in p:
			# p["Date"] = '2021-02-26T10:12:20.755311781+00:00'
			# return datetime.strptime(p["Date"], '%Y-%m-%dT%H:%M:%S.%f%z')
			from dateutil.parser import parse
			return parse(p["Date"])
		if "Duration" in p:
			nanoseconds = int(p["Duration"])
			return timedelta(microseconds=nanoseconds / 1000)

	if "Table" in v:
		return [decodeValue(item) for item in v["Table"]]

	# print(x)


def encodeValue(value):
	if isinstance(value, (list, tuple)):
		return {"Table": [
			{
				"value": encodeValue(x),
				"tag": {"anchor": None, "span": {"start": 0, "end": 0}},
			}
			for x in value
		]}
	if isinstance(value, (dict)):
		return {"Row": {
			"entries": {
				k: {
					"value": encodeValue(v),
					"tag": {"anchor": None, "span": {"start": 0, "end": 0}},
				}
				for k, v in value.items()
			},
		}}

	# expected one of `Nothing`, `Int`, `Decimal`, `Filesize`, `String`,
	# ColumnPath`, `GlobPattern`, `Boolean`, `Date`, `Duration`, `Range`,
	# `FilePath`, `Binary`, `BeginningOfStream`, `EndOfStream`

	if isinstance(value, str):
		return {"Primitive": {"String": value}}

	if isinstance(value, bool):
		return {"Primitive": {"Boolean": value}}

	if isinstance(value, int):
		return {"Primitive": {"Int": str(value)}}

	if isinstance(value, float):
		return {"Primitive": {"Decimal": str(value)}}

	if value is None:
		return {"Primitive": {"Nothing": None}}

	if isinstance(value, datetime):
		return {"Primitive": {"Date": value.isoformat()}}

	if isinstance(value, timedelta):
		nanoseconds = int(value.total_seconds()) * 1000000000 + value.microseconds
		return {"Primitive": {"Duration": str(nanoseconds)}}

	if isinstance(value, type):
		return {"Primitive": {"String": str(value)}}  # or value.__name__

	if value.__class__.__name__ == "LazyLocals":
		return encodeValue(dict(value))

	return {"Primitive": {"String": str(value)}}


class LazyLocals:
	def __init__(self, d: dict):
		self.d = d

	def __getitem__(self, key):
		return decodeValue(self.d[key])

	def keys(self):
		return self.d.keys()

	def items(self):
		for key in self.d:
			yield decodeValue(self.d[key])

	def __iter__(self):
		return self.items()


def get_eval(rawArgs, data):
	if not rawArgs:
		return {
			"Ok": {
				"Value": {
					"tag": data["params"]["tag"],
					"value": encodeValue(None),
				},
			},
		}
	args = [
		decodeValue(rawArg)
		for rawArg in rawArgs
	]
	expr = " ".join(args)
	# expr = " ".join([str(arg) for arg in args])
	params = data["params"]
	tag = params["tag"]
	span = tag["span"]
	value = params["value"]

	try:
		row = value["Row"]
	except KeyError:
		# print(repr(value))
		return {"Err": {"error": {"TypeError": {
			"expected": "row",
			"actual": {"span": span},
		}}}}
	else:
		_locals = LazyLocals(row["entries"])

	try:
		result = eval(expr, eval_globals, _locals)
	except Exception as e:
		if hasattr(e, "msg"):
			e.msg += f"\nargs = {args}\nrawArgs = {rawArgs}"
		raise e

	return {
		"Ok": {
			"Value": {
				"tag": tag,
				"value": encodeValue(result),
			},
		},
	}


args = []

for line in fileinput.input():
	x = json.loads(line)
	method = x.get("method")
	if method == "config":
		print_good_response({
			"name": "eval",
			"usage": "Evaluate a Python expression using table as variables",
			"positional": [],
			"rest_positional": ("String", ""),
			"named": {},
			"is_filter": True,
		})
		break

	if method == "begin_filter":
		positional = x["params"]["args"]["positional"]
		if positional is None:
			positional = []
		for rawArg in positional:
			arg = rawArg["value"]
			try:
				expr = arg["Primitive"]["String"]
			except KeyError:
				print([{"Err": {"error": {"TypeError": {
					"expected": "string",
					"actual": {"span": span},
				}}}}])
				break
			args.append(arg)
		else:
			print_good_response([])
		continue

	if method == "filter":
		print_good_response([
			get_eval(args, x),
		])
		continue

	if method == "end_filter":
		print_good_response([])
		break

	break
